    # | Register | Usage     | Type    | Description                            |
    # | -------- | --------- | ------- | -------------------------------------- |
    # | `$a0`    | input     | address | null-terminated string of binary chars |
    # | `$v0`    | output    | integer | decimal value of input string          |
    # | `$t0-9`  | temporary | any     | used for temporary storage             |

.globl      binary_convert

binary_convert:
    addi    $sp,            $sp,        -8
    sw      $ra,            0($sp)
    sw      $t2,            4($sp)

    jal     string_length                   # Jump to the string_length subrutine
    move    $t2,            $v0             # Move the result (length) to $s0 (index)

    li      $t0,            0               # Initialize sum to zero
    sub     $a0,            $a0,       $t2  # Reset the $a0 to the beginning of the input string
    subi    $a0,            $a0,       1

loop:
    lb      $t1,            0($a0)          # Load a byte from the string.
    beqz    $t1,            endLoop

    sub     $t1,            $t1,        '0' # Convert ASCII digit to integer.
    sllv    $t1,            $t1,        $t2 # Multiply by 2^index.
    add     $t0,            $t0,        $t1 # Add to sum.

    addi    $a0,            $a0,        1   # Move to the next character in the string.
    addi    $t2,            $t2,        -1  # Increment the index.

    j       loop

endLoop:
    move    $v0,            $t0

    lw      $ra,            0($sp)
    lw      $t2,            4($sp)
    addi    $sp,            $sp,        8

    jr      $ra

string_length:
    li      $v0,            -1               # Initialize length to 0
length_loop:
    lb      $t0,            0($a0)          # Load a byte from the current address in $a0
    beqz    $t0,            done            # If the byte is zero (null terminator), exit loop
    addi    $a0,            $a0,        1   # Move to the next character in the string
    addi    $v0,            $v0,        1   # Increment the length
    j       length_loop                     # Repeat the loop
done:
    jr      $ra                             # Return from subroutine
